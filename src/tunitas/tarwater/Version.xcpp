// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tunitas::tarwater {
  //
  // The version string, as a throwable exception.
  // Throwing the version exception is always a success signal because the user
  // requested it via the --version option.  The class has no other utility.
  //
  // Usage:
  //
  //   throw Version{};
  //
  class [[nodiscard]] Version;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Aspect
#import tunitas.app.exception.Version
#import tunitas.app.exception.Messaging
#import std.exception
#import std.string
class tunitas::tarwater::Version : public app::exception::Aspect,
                                   public app::exception::Version,
                                   public app::exception::Messaging,
                                   public std::exception {
  struct ancestors {
    using Aspect = app::exception::Aspect;
    using Version = app::exception::Version;
    using Messaging = app::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Version(std::string NAME);
  auto what() const noexcept -> char const * final;
  auto code() const noexcept -> sys::exits::Code final;
  auto stream() const noexcept -> std::ostream & final;
protected:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <ipp>
tunitas::tarwater::Version::Version(std::string NAME)
  : ancestors::Version{}
  , ancestors::Messaging{format(NAME)}
{ }
#endiv
#divert <cpp>
namespace tunitas::tarwater {
  auto Version::what() const noexcept -> char const * { return ancestors::Messaging::what(); }
  auto Version::code() const noexcept -> sys::exits::Code { return ancestors::Version::code(); }
  auto Version::stream() const noexcept -> std::ostream & { return ancestors::Version::stream(); }
}
#import std.ostringstream
auto tunitas::tarwater::Version::format(std::string const &NAME) -> std::string {
  std::ostringstream buf;
  auto const vstring = "v1.0.0"; // [[FIXTHIS]] get this out of config.h and autotools::autoconf::Config<CONFIG>::version_string()
  buf << NAME << ": version " << vstring << '\n';
  return buf.str();
}
#endiv
