// This is -*- c++ -*- (as close to C++2a as possible)
#divert <hpp>
#import tunitas.Outcome
#import tunitas.tarwater.url.Decoded
#import tunitas.tarwater.url.Encoded
namespace tunitas::tarwater::url {
  //
  // Decode an URL.
  //
  // The string is always copied.
  // Returns an outcome; but exceptions for the truly surprising (exceptional) problems.
  //
  // There are domain-specific failures here and such are not exceptional because these
  // string values come from the Big Bad Internet which is full of poison, rot and viciousness.
  //
  // See RFC 2396; and the documentariat within tunitas::urlsafe.
  //
  // Usage:
  // 
  //   auto safe = url::Encoded{"http%3A%2F%2Fexample.org%2Fsome_page.html%3Fid%3D%7Bid%7D%26status%3D%7Bstatus%7D%0A"}
  //   auto decoded = decode(safe);
  //   if (ok(decoded)) {
  //      Decoded native = value(std::move(decoded));
  //      ... use the native URL...
  //   } else {
  //       std::error_code ec = error_code(decoded);
  //       std::cerr << ec.message() << '\n';
  //   }
  //
  inline auto decode(Encoded const &) -> Outcome<Decoded>;
}
#endiv
#divert <ipp>
#import tunitas.urlsafe.decode
#import tunitas.urlsafe.Exception
#import std.error_code
#import tunitas.tarwater.error.Code
auto tunitas::tarwater::url::decode(Encoded const &input) -> Outcome<Decoded> {
  using Result = Outcome<Decoded>;
  namespace urlsafe = ::tunitas::urlsafe;
  try {
    return Result{urlsafe::decode(input)};
  } catch (urlsafe::Exception const &) {
    // e.g. bad percent-encode triple
    return Result{std::error_code{error::Code::BAD_URLSAFE_ENCODING}};
  }
}
#endiv
