// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <hpp>
#import tunitas.Outcome
#import tunitas.tarwater.identifier.Integer
#import tunitas.tarwater.identifier.Encoded
namespace tunitas::tarwater::identifier {
  //
  // Decode the DigiTrust identifier (string)
  // An base64 -> integer.
  //
  // <WATCHOUT>DigiTrust is using LITTLE-ENDIAN for NETWORK ORDER</WATCHOUT>
  // See the documentariat in namespace.xcpp
  //
  // Failure is not exceptional because the string values come from the Big Bad Internet.
  // Returns an outcome; but exceptions for the truly surprising (exceptional) problems.
  //
  // Usage:
  // 
  //   auto str = identifier::Encoded{"VJ+TjrjhnvU="};
  //   auto decoded = decode(str);
  //   if (ok(decoded)) {
  //      Integer id = value(decoded);
  //      ... use id...
  //   } else {
  //       std::error_code ec = error_code(decoded);
  //       std::cerr << ec.message() << '\n';
  //   }
  //
  //   encode(Integer{0x123456789abcdef}) == Encoded{"782riWdFIwE="};
  //
  inline auto decode(Encoded const &) -> Outcome<Integer>;
}
#endiv
#divert <ipp>
#import std.error_code
#import std.underlying_type
#import tunitas.base64.Decoder
#import tunitas.base64.Exception
#import tunitas.tarwater.error.Code
auto tunitas::tarwater::identifier::decode(Encoded const &input) -> Outcome<Integer> {
  using Result = Outcome<Integer>;
  using namespace ::tunitas::base64;
  try {
    Decoder dec{input};
    using Underlying = std::underlying_type<Integer>::type;
    Underlying candidate{0};
    if constexpr (HAD_USED_PROPER_NETWORK_ORDER_PROPERLY) {
      candidate = dec.get<Underlying>();
    } else {
      // blik
      // byte order within the integer is little endian.
      // bit order within bytes are still big-endian
      // bytes are decoded in little endian order; put them into the candidate big-into-small.
      auto const SHIFT = 8*(sizeof (Underlying)-1);
      static_assert(56 == SHIFT);
      for (auto i{0lu}, e{sizeof (Underlying)}; e != i; ++i) {
	candidate >>= 8;
	candidate |= Underlying(dec.get<unsigned char>()) << SHIFT;
      }
    }
    if (!dec.eof()) {
      // extra junk at the end
      return Result{std::error_code{error::Code::BAD_BASE64_ENCODING}};
    }
    return Result{Integer(candidate)};
  } catch (Exception const &) {
    // e.g. underflow, or such
    return Result{std::error_code{error::Code::BAD_BASE64_ENCODING}};
  }
}
#endiv
