// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tunitas::tarwater::substring {
  //
  // A descendant of std::string which is a distinct type.
  // An implementation detail.
  // Exactly like a std::string except that ADL works against them.
  //
  // Usage:
  //
  //   namespace apple {
  //     enum APPLE { };
  //     using String = substring::Object<APPLE>;
  //     auto function(String) -> void;
  //   }
  //   namespace banana {
  //     enum BANANA { };
  //     using String = substring::Object<BANANA>;
  //     auto function(String) -> void;
  //   }
  //
  template<typename TAG> class Object;
}
#endiv
#divert <hpp>
#import std.string
template<typename TAG> class tunitas::tarwater::substring::Object : public std::string {
  using ancestor = std::string;
  // declaring robust subclasses of std::string is laborious
public:
  Object() = default;
  inline Object(ancestor const &);
  inline Object(ancestor &&);
  using ancestor::basic_string;
  inline Object(Object const &) = default; // required because of the nonstandard operator=
  inline Object(Object &&) = default; // ibidem.
  using ancestor::operator=;
  auto operator=(ancestor const &) -> Object &;
  auto operator=(ancestor &&) -> Object &;
  auto operator=(Object const &) -> Object & = default; // required because of the other nonstandard operator=
  auto operator=(Object &&) -> Object & = default; // ibidem.
};
#endiv
#divert <ipp>
#import std.forward
namespace tunitas::tarwater::substring {
  template<typename _> Object<_>::Object(ancestor const &other)
    : ancestor{other} { }
  template<typename _> Object<_>::Object(ancestor &&other)
    : ancestor{std::forward<ancestor>(other)} { }
  template<typename _> auto Object<_>::operator=(ancestor const &other) -> Object & {
    ancestor::operator=(other);
    return *this;
  }
  template<typename _> auto Object<_>::operator=(ancestor &&other) -> Object & {
    ancestor::operator=(std::forward<ancestor>(other));
    return *this;
  }
}
#endiv
