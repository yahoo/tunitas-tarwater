// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::tarwater::cookie {
  //
  // A cookie object breaks out all of the individual fields
  //
  // Usage
  //
  //   Object obj = decode(some_string);
  //   std::string str = encode(obj);
  //
  class Object;
}
#endiv
#divert <hpp>
#import std.string
#import std.ostream
#import tunitas.tarwater.cookie.String
namespace tunitas::tarwater::cookie {
  auto operator<<(std::ostream &, Object const &) -> std::ostream &;
}
#import tunitas.tarwater.identifier.Integer
#import tunitas.tarwater.member.Name
class tunitas::tarwater::cookie::Object {
public:
  inline Object();
  using Identifier = identifier::Integer;
  using Member = member::Name;
  inline Object(Identifier, Member, bool optout = false);
  Identifier id;
  int version;
  Member member;
  bool optout;
};
#endiv
#divert <ipp>
#import tunitas.tarwater.constants
tunitas::tarwater::cookie::Object::Object()
  : id{}
  , version{constants::cookie::v1::VERSION}
  , member{}
  , optout{false}
{ }
#import std.move
tunitas::tarwater::cookie::Object::Object(Identifier id, Member member, bool optout)
  : id{std::move(id)}
  , version{constants::cookie::v1::VERSION}
  , member{std::move(member)}
  , optout{optout}
{ }
#endiv
