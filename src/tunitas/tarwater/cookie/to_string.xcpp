// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <hpp>
#import tunitas.tarwater.cookie.String
#import tunitas.tarwater.cookie.Object
namespace tunitas::tarwater::cookie {
  //
  // Convert a cookie object to a (JSON) string.
  // With the most cogent formatting option possible.
  // We want a canonical form, a one-liner.
  //
  // MUST NOT use the pretty printing option.
  //
  // Usage:
  //
  //   std::string str = to_string(obj);
  //
  inline auto to_string(Object const &) -> String<JSON>;
}
#endiv
#divert <ipp>
#import std.isspace
#import std.move
#import std.ostringstream
auto tunitas::tarwater::cookie::to_string(Object const &o) -> String<JSON> {
  std::ostringstream buf;
  buf << o;
  auto s = buf.str();
  if constexpr (true) {
    // STILL?
    // Irk! Irk!  Irk! Because the fast writer adds whitespace to the end(!?)
    while (s.size() && std::isspace(s.back())) {
      s.erase(s.size()-1, 1);
    }
  }
  return std::move(s);
}
#endiv
#divert <cpp>
// [[FIXTHIS]] #import json.types // json::int64 need Famous Oak, module-json-1:0.6.1-3.0.tu01.fc27.gcc7
#import json.Value
#import json.writer.Stream
#import json.writer.stream.Builder
#import std.unique_ptr
#import json.writer.Fast
#import tunitas.tarwater.constants
#import std.underlying_type
#import nonstd.exception.Unreachable
auto tunitas::tarwater::cookie::operator<<(std::ostream &os, Object const &ob) -> std::ostream & {
  using namespace constants::cookie::v1::attributes;
  json::Value jo;
  using integer = std::underlying_type<decltype(ob.id)>::type;
  jo[ID] = (integer) ob.id;
  jo[VERSION] = ob.version;
  jo[PRODUCER] = ob.member;
  jo[PRIVACY][privacy::OPTOUT] = ob.optout;
  if constexpr (false) {
    // [[DELETEWHEN]] we are satisfied that the stream::Builder idiom is "good enough"
    return os << jo; // too pretty (uses json.writer.stream.Styled (or such)
  } else if constexpr (true) {
    // [[DELETEWHEN]] we are satisfied that the stream::Builder idiom is "good enough"
    json::writer::Fast fast;
    return os << fast.write(jo); // WATCHOUT - we expect no gratuitious final newline
  } else if constexpr (false) {
    // Because we want to write directly to the ostream without any intervening copy-to-string-and-back
    // Wow! This is lugubrious and Java-esque.
    using namespace json::writer;
    stream::Builder bob;
    bob["commentStyle"] = "None";
    std::unique_ptr<Stream> writer(bob.newStreamWriter());
    writer->write(jo, &os); // WATCHOUT - this is UNUSEABLE because it adds a final unwarranted \n
    return os;
  }
  throw nonstd::exception::Unreachable{__FUNCTION__, __FILE__, __LINE__};
}
#endiv
