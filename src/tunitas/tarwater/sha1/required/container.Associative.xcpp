// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
#import tunitas.tarwater.sha1.required.container.Contiguous
#import tunitas.tarwater.sha1.required.container.Sequence
namespace tunitas::tarwater::sha1::required::container {
  //
  // An associative container is a sequence that is not continguous
  //
  // https://en.cppreference.com/w/cpp/container
  // https://en.wikipedia.org/wiki/Associative_containers
  //
  template<typename CONTAINER> concept bool Associative = Sequence<CONTAINER> && ! Contiguous<CONTAINER>;
}
#endiv
#divert <cpp>
// This is test code, of course.
#import std.array
#import std.map
#import std.set
#import std.string
#import std.string_view
#import std.vector
namespace tunitas::tarwater::sha1::required::container {
  // Because of the dope vector effect
  static_assert(!Associative<std::array<char, 99>>);
  static_assert(!Associative<std::vector<char>>);
  // Because there is indirect data "outside" of the vector
  static_assert(Associative<std::vector<char const *>>);
  static_assert(Associative<std::vector<std::string>>);
  // Because of the dope vector effect
  static_assert(!Associative<std::string>);
  static_assert(!Associative<std::string_view>);
  // Because they are associative
  static_assert(Associative<std::set<std::string>>);
  static_assert(Associative<std::map<int, std::string>>);
}
#endiv
