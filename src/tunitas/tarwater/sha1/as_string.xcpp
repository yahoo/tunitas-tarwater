// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <hpp>
#import tunitas.tarwater.sha1.required.As_Stringable
#import tunitas.tarwater.sha1.workbench.As_String
namespace tunitas::tarwater::sha1 {
  //
  // Format a data type as "a string" for the workbench.
  //
  // Precondition:
  //   The lifetime of the value must be longer than the returned formatter object.
  //   The function std::to_string(TYPE) must exist.
  //
  // Usage:
  //
  //   Workbench wb;
  //   auto something = ...something...
  //   wb << as_string(something);
  //
  template<required::As_Stringable TYPE> inline auto as_string(TYPE const &) -> workbench::As_String<TYPE>;
}
#endiv
#divert <ipp>
namespace tunitas::tarwater {
  template<sha1::required::As_Stringable TYPE> auto sha1::as_string(TYPE const &value) -> workbench::As_String<TYPE> {
    return workbench::As_String<TYPE>{value};
  }
}
#endiv
