// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <hpp>
#import tunitas.tarwater.sha1.Bytes
#import tunitas.tarwater.sha1.Workbench
namespace tunitas::tarwater::sha1 {
  //
  // Compute SHA1 on the textual representation of the inputs
  //
  // Usage:
  //
  //   sha1::Bytes b = sha1::function("apple", 1, "banana", 2.0);
  //
  template<typename... TYPES> inline auto function(TYPES const &...) -> Bytes;
  namespace detail {
    inline auto function(Workbench &) -> void;
    template<typename TYPE, typename... REST> inline auto function(Workbench &, TYPE const &, REST const &...) -> void;
  }
}
#endiv
#divert <ipp>
namespace tunitas::tarwater {
  template<typename... TYPES> auto sha1::function(TYPES const &...values) -> Bytes {
    Workbench wb;
    detail::function(wb, values...);
    return bytes(wb);
  }
  auto sha1::detail::function(Workbench &) -> void { }
  template<typename TYPE, typename... REST> auto sha1::detail::function(Workbench &wb, TYPE const &first, REST const &...rest) -> void {
    wb << first;
    function(wb, rest...);
  }
}
#endiv
