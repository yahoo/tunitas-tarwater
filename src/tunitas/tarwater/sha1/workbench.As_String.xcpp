// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
#import tunitas.tarwater.sha1.required.As_Stringable
namespace tunitas::tarwater::sha1::workbench {
  //
  // The to_string(TYPE) formatter for the Workbench
  //
  // WATCHOUT - if TYPE is a floating point type then six digits of precision are used
  // as documented https://en.cppreference.com/w/cpp/string/basic_string/to_string
  //
  // Precondition:
  //   The lifetime of the value must be longer than the As_String object.
  //   The function std::to_string(TYPE) must exist.
  //
  // Usage: nearby, see as_string(...)
  //
  //   Workbench wb;
  //   auto something = ...something...
  //   wb << as_string(something);
  //
  template<required::As_Stringable TYPE> struct As_String;
}
#endiv
#divert <hpp>
namespace tunitas::tarwater::sha1 {
  template<required::As_Stringable TYPE> struct workbench::As_String {
    using Value = TYPE;
    inline explicit As_String(Value const &value) : value{value} { };
    Value value;
  };
}
#endiv

