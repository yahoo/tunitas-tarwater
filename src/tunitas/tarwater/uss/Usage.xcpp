// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace tunitas::tarwater::uss {
  //
  // The usage string, as a throwable exception.
  // Throwing the usage exception may or may not signal success or an error depending
  // upon whether the user requested it via the --usage option.  It has both utilities.
  //
  // Usage:
  //
  //   throw Usage{};
  //   throw Usage{sys::exits::USAGE};
  //   throw Usage{sys::exits::CONFIG};
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Usage
#import tunitas.app.exception.Messaging
#import std.exception
#import std.string
#import sys.exits.constants
class tunitas::tarwater::uss::Usage : public app::exception::Usage, public app::exception::Messaging, public std::exception {
  struct ancestors {
    using Usage = app::exception::Usage;
    using Messaging = app::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Usage(std::string name, sys::exits::Code = sys::exits::OK);
  auto what() const noexcept -> char const * final;
protected:
  static auto format(std::string const &name) -> std::string;
};
#endiv
#divert <ipp>
tunitas::tarwater::uss::Usage::Usage(std::string name, sys::exits::Code code)
  : ancestors::Usage{code}
  , ancestors::Messaging{format(name)}
{ }
#endiv
#divert <cpp>
auto tunitas::tarwater::uss::Usage::what() const noexcept -> char const * {
  return ancestors::Messaging::what();
}
#import std.ostringstream
auto tunitas::tarwater::uss::Usage::format(std::string const &name) -> std::string {
  std::ostringstream buf;
  buf << "usage: " << name << " [...options...]\n"
      << '\n'
      << "Server Options:\n"
      << "(none yet)\n"
      << '\n'
      << "Standard Options:\n"
      << "--usage, --help, -h              emit this usage message and quit\n"
      << "--version, -V                    emit the version message and quit"; // no final \n
  return buf.str();
}
#endiv
