// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::tarwater::endpoint {
  //
  // The code behind the /sync endpoint
  //
  // See https://github.com/digi-trust/dt-cdn/wiki/User-Sync-Service-(Draft)
  //
  // Scheme:
  //
  //   //usync.digitru.st/userid?member={member_id}&ts={timestamp}&next={next}&token={token}
  //
  // Example:
  //
  //   //usync.digitru.st/userid?member=nQjyizbdyF&ts=1528757444&next=http%3A%2F%2Fusync.example.com%2Fdigitrust%3Fid%3D%7Bid%7D%26status%3D%7Bstatus%7D&token=21944721d8f6279332ecc8beb61dbbc80edbb504
  //
  // Usage:
  //
  //   uss::endpoint::Sync sync;
  //   ws.register_resource("/sync", &sync, true);
  //   ws.register_resource("/userid", &sync, true);
  //   ws.start(cfg.foreground);
  //   
  class Sync;
}
#endiv
#divert <hpp>
#import tunitas.tarwater.service.Aspect
#import tunitas.tarwater.service.Core
class tunitas::tarwater::endpoint::Sync : public Resource<Sync>, service::Aspect {
  struct ancestors {
    using Webserver = Resource<Sync>;
    using DigiTrust = service::Aspect;
  };
public:
  inline explicit Sync(service::Core &);
  auto render_GET(Request const &, [[out]] Response *&) -> void;
public: // though we wish it was private and even more so we wish that it did not exist
  auto render_GET(Request const &r, [[out]] Response **f) -> void { render_GET(r, *f); }
};
#endiv
#divert <ipp>
tunitas::tarwater::endpoint::Sync::Sync(service::Core &core)
  : ancestors::Webserver{}
  , ancestors::DigiTrust{core}
{ }
#endiv
#divert <cpp>
#import tunitas.tarwater.constants
#import tunitas.server.responses
#import tunitas.server.filters
#import std.exception
#import std.move
#import tunitas.tarwater.identifier.to_string
#import tunitas.tarwater.url.decode
#import tunitas.tarwater.url.format
#import tunitas.tarwater.url.formatting.Variables
auto tunitas::tarwater::endpoint::Sync::render_GET(Request const &request, Response *&fill) -> void
  try {
    // enforce something?
    //   filters::enforce_no_query_parameters(request, fill);
    if (nullptr == fill) {
      auto specified = ancestors::DigiTrust::get_redirect_specification(request);
      if (!ok(specified)) {
	server::responses::bad_request(fill, error_code(specified).message());
      } else {
	auto const specification = value(std::move(specified));
	auto validated = core.validate(specification);
	if (!ok(validated)) {
	  server::responses::bad_request(fill, error_code(validated).message());
	} else {
	  auto decoded = url::decode(value(std::move(validated)));
	  if (!ok(decoded)) {
	    server::responses::bad_request(fill, error_code(decoded).message());
	  } else {
	    auto pattern = value(std::move(decoded));
	    auto identified = ancestors::DigiTrust::get_identifier(request);
	    if (!ok(identified)) {
	      server::responses::bad_request(fill, error_code(identified).message());
	    } else {
	      auto [set_cookie, identifier, status] = core.finalize_identifier(std::move(identified));
	      url::formatting::Variables const variables{{"id", to_string(identifier)}, {"status", to_string(status)}};
	      auto redirect = url::format(pattern, variables);
	      auto const &content_body = R"text(move the identity pairing over there where they will log the co-occurrence)text";
	      auto const code = http::R302_FOUND;
	      auto const &content_type = mime::TEXT_PLAIN;
	      httpserver::response::Builder bob{content_body, code, content_type};
	      bob.with_header("Location", std::move(redirect));
	      if (set_cookie) {
		bob.with_header("Set-Cookie", core.format_cookie(identifier));
	      }
	      fill = new Response{bob};
	    }
	  }
	}
      }
    }
  } catch (std::exception const &e) {
    server::responses::internal_server_error(fill, e.what());
  } catch (...) {
    server::responses::internal_server_error(fill);
  }

#endiv
