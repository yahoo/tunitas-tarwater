// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tests::unit::identifier { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::identifier::Fixture : public cppunit::test::Fixture {
public:
  auto test_Encoded() -> void;
  auto test_Integer() -> void;
  auto test_State() -> void;
  auto test_encode() -> void;
  auto test_decode() -> void;
  auto test_to_string_Encoded() -> void;
  auto test_to_string_Integer() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.tarwater.identifier.Encoded
auto tests::unit::identifier::Fixture::test_Encoded() -> void {
  using namespace ::tunitas::tarwater::identifier;
  auto id = Encoded{"VJ+TjrjhnvU="};
  CPPUNIT_ASSERT(!id.empty());
}
#import tunitas.tarwater.identifier.Integer
auto tests::unit::identifier::Fixture::test_Integer() -> void {
  using namespace ::tunitas::tarwater::identifier;
  auto id = Integer{0x0'9f54'8e93'e1b8'f59elu};
  CPPUNIT_ASSERT(0 != (std::uint64_t)id);
}
#import tunitas.tarwater.identifier.State
auto tests::unit::identifier::Fixture::test_State() -> void {
  using namespace ::tunitas::tarwater::identifier;
  CPPUNIT_ASSERT(0 == (int) State::PRESENT);
}
#import tunitas.tarwater.identifier.encode
auto tests::unit::identifier::Fixture::test_encode() -> void {
  using namespace ::tunitas::tarwater::identifier;
  // as published https://github.com/digi-trust/dt-cdn/wiki/Cookies-for-Platforms
  // WATCHOUT - the published standard uses "little endian" for network order THAT IS WRONG by RFC1700
  //
  // 0x0'ba8c'd241'd901'218flu
  //
  // RFC 1700  big-endian-------> $ perl -e 'print qq(\xba\x8c\xd2\x41\xd9\x01\x21\x8f);' | base64
  // RFC 1700  big-endian-------> uozSQdkBIY8=
  // DigiTrust little-endian----> $ perl -e 'print qq(\x8f\x21\x01\xd9\x41\xd2\x8c\xba);' | base64
  // DigiTrust little-endian----> jyEB2UHSjLo=
  //
  auto const subject = Integer{0x0'ba8c'd241'd901'218flu};
  auto const actual = encode(subject);
  auto const expected = Encoded{"jyEB2UHSjLo="};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tunitas.tarwater.identifier.decode
auto tests::unit::identifier::Fixture::test_decode() -> void {
  using namespace ::tunitas::tarwater::identifier;
  auto const subject = Encoded{"jyEB2UHSjLo="};
  auto const decoded = decode(subject);
  auto const actual = value(decoded);
  auto const expected = Integer{0x0'ba8c'd241'd901'218flu};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tunitas.tarwater.identifier.to_string
auto tests::unit::identifier::Fixture::test_to_string_Encoded() -> void {
  using namespace ::tunitas::tarwater::identifier;
  auto const subject = Encoded{"VJ+TjrjhnvU="};
  auto const actual = to_string(subject);
  auto const expected = std::string{"VJ+TjrjhnvU="};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::identifier::Fixture::test_to_string_Integer() -> void {
  using namespace ::tunitas::tarwater::identifier;
  auto const subject = Integer{0x0'ba8c'd241'd901'218flu};
  auto const actual = to_string(subject);
  auto const expected = std::string{"jyEB2UHSjLo="};
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import rigging.suite.Stream
#import rigging.suite.call
#import rigging.suite.add
auto tests::unit::identifier::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("identifier");
  series << call("Encoded", &Fixture::test_Encoded)
	 << call("Integer", &Fixture::test_Integer)
	 << call("State", &Fixture::test_State)
	 << call("encode", &Fixture::test_encode)
	 << call("decode", &Fixture::test_decode)
         << []() {
              Stream tos("to_string");
              tos << call("Encoded", &Fixture::test_to_string_Encoded)
                  << call("Integer", &Fixture::test_to_string_Integer)
                ;
              return move(tos);
            }()
    ;
  return finalize(series);
}
#endiv
