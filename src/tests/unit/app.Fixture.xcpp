// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::app { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::app::Fixture : public cppunit::test::Fixture {
public:
  auto test_exception_Quitting() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import sys.exits.constants
#import std.exception
#import app.exception.Quitting
auto tests::unit::app::Fixture::test_exception_Quitting() -> void {
  try {
    auto const NAME = "NAME"s;
    throw ::app::exception::Quitting{NAME, sys::exits::FAIL};
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::app::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("app");
  {
    Stream exc("exception");
    exc << call("Quitting", &Fixture::test_exception_Quitting)
      ;
    series << add(exc.release());
  }
  return series.release();
}
#endiv
