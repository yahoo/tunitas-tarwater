// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tests::unit::app { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::app::Fixture : public cppunit::test::Fixture {
public:
  auto test_exception_Version_constructor() -> void;
  auto test_exception_Version_what() -> void;
  auto test_exception_Version_throwing() -> void;
  auto test_exception_Quitting() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import sys.exits.constants
#import std.exception
#import app.exception.Quitting
#import tunitas.app.exception.Aspect
auto tests::unit::app::Fixture::test_exception_Quitting() -> void {
  try {
    auto const NAME = "NAME"s;
    throw ::app::exception::Quitting{NAME, sys::exits::FAIL};
  } catch (::tunitas::app::exception::Aspect const &q) {
    q.stream() << q.what() << '\n';
    CPPUNIT_ASSERT(q.code() == sys::exits::FAIL);
  } catch (std::exception const &) {
    // This is a surprise
    CPPUNIT_ASSERT(false);
  }
}
#import app.exception.Version
auto tests::unit::app::Fixture::test_exception_Version_constructor() -> void {
  ::app::exception::Version subject{"a.out"};
  CPPUNIT_ASSERT(sizeof (subject));
}
#import std.cerr
auto tests::unit::app::Fixture::test_exception_Version_what() -> void {
  ::app::exception::Version subject{"a.out"};
  std::cerr << subject.what() << '\n';
}
#import app.exception.Version
#import tunitas.app.exception.Aspect
auto tests::unit::app::Fixture::test_exception_Version_throwing() -> void {
  try {
    throw ::app::exception::Version{"a.out"};
  } catch (::tunitas::app::exception::Aspect const &g) {
    g.stream() << g.what() << '\n';
    CPPUNIT_ASSERT(sys::exits::OK == g.code());
  } catch (...) {
    // We wanted to catch with a tunitas::app::exception::Aspect, but that failed.  This is a surprise.
    CPPUNIT_ASSERT(false);
  }
}
#import rigging.suite.Stream
#import rigging.suite.call
#import rigging.suite.add
auto tests::unit::app::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("app");
  series << []() {
              Stream exc("exception");
              exc << call("Quitting", &Fixture::test_exception_Quitting)
                  << []() {
                       Stream ver("Version");
                       ver << call("constructor", &Fixture::test_exception_Version_constructor)
                           << call("what", &Fixture::test_exception_Version_what)
                           << call("throwing", &Fixture::test_exception_Version_throwing)
                         ;
                       return move(ver);
                     }()
                ;
              return move(exc);
            }()
    ;    ;
  return finalize(series);
}
#endiv
