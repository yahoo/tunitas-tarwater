// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::tarwater { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::tarwater::Fixture : public cppunit::test::Fixture {
public:
  auto test_Version_constructor() -> void;
  auto test_Version_what() -> void;
  auto test_Version_throwing() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.tarwater.Version
auto tests::unit::tarwater::Fixture::test_Version_constructor() -> void {
  ::tunitas::tarwater::Version subject{"a.out"};
  CPPUNIT_ASSERT(true);
}
#import std.cerr
auto tests::unit::tarwater::Fixture::test_Version_what() -> void {
  ::tunitas::tarwater::Version subject{"a.out"};
  std::cerr << subject.what() << '\n';
  CPPUNIT_ASSERT(true);
}
#import tunitas.app.exception.Aspect
auto tests::unit::tarwater::Fixture::test_Version_throwing() -> void {
  try {
    throw ::tunitas::tarwater::Version{"a.out"};
  } catch (::tunitas::app::exception::Aspect const &g) {
    g.stream() << g.what() << '\n';
    CPPUNIT_ASSERT(sys::exits::OK == g.code());
  } catch (...) {
    // We wanted to catch with a tunitas::app::exception::Aspect, but that failed.  This is a surprise.
    CPPUNIT_ASSERT(false);
  }
}
#import rigging.suite.Stream
#import rigging.suite.call
#import rigging.suite.add
auto tests::unit::tarwater::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("tarwater");
  series << []() {
              Stream ver("Version");
              ver << call("constructor", &Fixture::test_Version_constructor)
                  << call("what", &Fixture::test_Version_what)
                  << call("throwing", &Fixture::test_Version_throwing)
                ;
              return move(ver);
            }()
    ;
  return finalize(series);
}
#endiv
