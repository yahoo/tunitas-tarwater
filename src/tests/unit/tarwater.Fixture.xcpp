// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tests::unit::tarwater { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::tarwater::Fixture : public cppunit::test::Fixture {
  auto test_version_String() -> void;
  auto test_time_Point() -> void; // but see time::Fixture, nearby
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import tunitas.tarwater.version.String
auto tests::unit::tarwater::Fixture::test_version_String() -> void {
  auto subject = ::tunitas::tarwater::version::String{};
  std::cerr << subject << '\n';
  CPPUNIT_ASSERT(true);
}
#import tunitas.tarwater.time.Point
auto tests::unit::tarwater::Fixture::test_time_Point() -> void {
  // but see time::Fixture, nearby
  auto subject = ::tunitas::tarwater::time::Point{};
  CPPUNIT_ASSERT(sizeof (subject));
}
auto tests::unit::tarwater::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("tarwater");
  series << []() {
              Stream ver("version");
              ver << call("String", &Fixture::test_version_String)
                  << END;
              return ver;
            }()
         << []() {
              Stream ver("time");
              ver << call("Point", &Fixture::test_time_Point)
                  << END;
              return ver;
            }()
         << END;
  return finalize(series);
}
#endiv
