// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tests::unit::cookie { class Encode; }
#endiv
#divert <hpp>
struct tests::unit::cookie::Encode : public cppunit::test::Fixture {
  auto test_base64_encoding_1() -> void;
  auto test_base64_encoding_2() -> void;
  auto test_good_string_j2u() -> void;
  auto test_good_string_b2u() -> void;
  auto test_good_string_u2u() -> void;
  auto test_good_object_o2u() -> void;
  auto test_good_outcome_j2u() -> void;
  auto test_good_outcome_b2u() -> void;
  auto test_good_outcome_u2u() -> void;
  auto test_bad_generic() -> void;
  auto test_bad_outcome_j2u() -> void;
  auto test_bad_outcome_b2u() -> void;
  auto test_bad_outcome_u2u() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cerr
#import std.string_literals
#import tunitas.tarwater.cookie.encode
using namespace std::literals;
#import tunitas.base64.encode
auto tests::unit::cookie::Encode::test_base64_encoding_1() -> void {
  using ::tunitas::base64::encode;
  {
    auto specimen = "a"s;
    auto const actual = encode(specimen);
    auto const expected = "YQ=="s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "ab"s;
    auto const actual = encode(specimen);
    auto const expected = "YWI="s; // echo -n 'ab' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abc"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJj"s; // echo -n 'abc' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcd"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZA=="s; // echo -n 'abcd' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcde"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGU="s; // echo -n 'abcde' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcdef"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGVm"s; // echo -n 'abcdef' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcdefg"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGVmZw=="s; // echo -n 'abcdefg' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcdefgh"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGVmZ2g="s; // echo -n 'abcdefgh' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcdefghi"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGVmZ2hp"s; // echo -n 'abcdefghi' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    auto specimen = "abcdefghij"s;
    auto const actual = encode(specimen);
    auto const expected = "YWJjZGVmZ2hpag=="s; // echo -n 'abcdefghij' | base64
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  std::cerr << "basic base64 encoding works!\n";
}
auto tests::unit::cookie::Encode::test_base64_encoding_2() -> void {
  // Do we need a 2nd one?
}
auto tests::unit::cookie::Encode::test_good_string_j2u() -> void {
  using namespace ::tunitas::tarwater::cookie;
  auto const original = R"json({"id":"jyEB2UHSjLo=", "version": 2, "producer": "1CrsdUNAo6", "privacy": {"optout": false}})json"s;
  auto const specimen = String<JSON>{original};
  auto const encoded = encode(specimen);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::cookie::Encode::test_good_string_b2u() -> void {
  using namespace ::tunitas::tarwater::cookie;
  auto const original = R"base64(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ==)base64"s;
  auto const specimen = String<BASE64>{original};
  auto const encoded = encode(specimen);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::cookie::Encode::test_good_string_u2u() -> void {
  using namespace ::tunitas::tarwater::cookie;
  auto const original = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  auto const specimen = String<URLSAFE>{original};
 auto const encoded = encode(specimen);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = original;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tunitas.tarwater.cookie.Encoded
#import tunitas.tarwater.cookie.Object
#import tunitas.tarwater.cookie.String
#import tunitas.tarwater.cookie.encode
#import tunitas.tarwater.identifier.Encoded
#import tunitas.tarwater.identifier.Integer
#import tunitas.tarwater.identifier.encode
#import tunitas.tarwater.member.Name
namespace member = ::tunitas::tarwater::member;
namespace identifier = ::tunitas::tarwater::identifier;
namespace error = ::tunitas::tarwater::error;
using namespace ::tunitas::tarwater::cookie;
auto tests::unit::cookie::Encode::test_good_object_o2u() -> void {
  // perl -e 'print qq(\xba\x8c\xd2\x41\xd9\x01\x21\x8f);' | base64
  // uozSQdkBIY8=
  auto const id_integer = identifier::Integer{0x0'8f21'01d9'41d2'8cba};
  auto const id_string = identifier::Encoded{"uozSQdkBIY8="};
  CPPUNIT_ASSERT(id_string == identifier::encode(id_integer));
  auto original = Object{id_integer, member::Name{"1CrsdUNAo6"}};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  //
  // The fields must be in alphabetical order!
  //
  //       /-------------------------------- the printer formats this as an integer.
  //       |
  //       vvvvvvvvvvvvvv
  // {"id":"jyEB2UHSjLo=","producer":"1CrsdUNAo6","privacy":{"optout":false},"version":2}
  //
  if constexpr (false) {
      auto const &expected = R"urlsafe(wrong-wrong-wrong---eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
      CPPUNIT_ASSERT_EQUAL(expected, actual);
    } else {
    // <lazy>WATCHOUT - this was not independently generated, it was copied from a previous run of the tester</lazy>
    auto const &expected = R"urlsafe(eyJpZCI6MTAzMTM1MjY2NTQyNzg5OTUxMzAsInByaXZhY3kiOnsib3B0b3V0IjpmYWxzZX0sInByb2R1Y2VyIjoiMUNyc2RVTkFvNiIsInZlcnNpb24iOjJ9)urlsafe"s;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
auto tests::unit::cookie::Encode::test_good_outcome_j2u() -> void {
  using Outcome = ::tunitas::Outcome<String<JSON>>;
  auto const original = Outcome{R"json({"id":"jyEB2UHSjLo=", "version": 2, "producer": "1CrsdUNAo6", "privacy": {"optout": false}})json"};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::cookie::Encode::test_good_outcome_b2u() -> void {
  using Outcome = ::tunitas::Outcome<String<BASE64>>;
  auto const original = Outcome{R"base64(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ==)base64"};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);

}
auto tests::unit::cookie::Encode::test_good_outcome_u2u() -> void {
  using Outcome = ::tunitas::Outcome<String<URLSAFE>>;
  auto const original = R"urlsafe(eyJpZCI6Imp5RUIyVUhTakxvPSIsICJ2ZXJzaW9uIjogMiwgInByb2R1Y2VyIjogIjFDcnNkVU5BbzYiLCAicHJpdmFjeSI6IHsib3B0b3V0IjogZmFsc2V9fQ%3D%3D)urlsafe"s;
  auto const specimen = Outcome{original};
  auto const encoded = encode(specimen);
  CPPUNIT_ASSERT(ok(encoded));
  auto const &actual = static_cast<std::string const &>(value(encoded));
  auto const &expected = original;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::cookie::Encode::test_bad_generic() -> void {
  auto const original = R"json({"id":"jyEB2UHSjLo=", select * from employees where empno > 100;  "version": 2, "producer": "1CrsdUNAo6", "privacy": {"optout": false}})json"s;
  auto specimen = String<JSON>{original};
  auto const encoded = encode(specimen); // <--- encode(String<JSON>) does not check for bad JSON
  CPPUNIT_ASSERT(ok(encoded)); // <------------- so this succeeds
}
#import tunitas.tarwater.error.Code
#import std.error_code
auto tests::unit::cookie::Encode::test_bad_outcome_j2u() -> void {
  using Outcome = ::tunitas::Outcome<String<JSON>>;
  auto const original = Outcome{std::error_code{error::Code::BAD_JSON_ENCODING}};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(!ok(encoded));
}
auto tests::unit::cookie::Encode::test_bad_outcome_b2u() -> void {
  using namespace ::tunitas::tarwater::cookie;
  namespace error = ::tunitas::tarwater::error;
  using Outcome = ::tunitas::Outcome<String<BASE64>>;
  auto const original = Outcome{std::error_code{error::Code::BAD_BASE64_ENCODING}};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(!ok(encoded));
}
auto tests::unit::cookie::Encode::test_bad_outcome_u2u() -> void {
  using namespace ::tunitas::tarwater::cookie;
  namespace error = ::tunitas::tarwater::error;
  using Outcome = ::tunitas::Outcome<String<URLSAFE>>;
  auto const original = Outcome{std::error_code{error::Code::BAD_URLSAFE_ENCODING}};
  auto const encoded = encode(original);
  CPPUNIT_ASSERT(!ok(encoded));
}
auto tests::unit::cookie::Encode::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("encode");
  series << []() {
              Stream beg{"base64-encoding"};
              beg << call("1", &Encode::test_base64_encoding_1)
                  << call("2", &Encode::test_base64_encoding_2)
                  << END;
              return beg;
            }()
         << []() {
              Stream good{"good"};
              good << []() {
                        Stream str{"String"};
                        str << call("JSON", &Encode::test_good_string_j2u)
                            << call("BASE64", &Encode::test_good_string_b2u)
                            << call("URLSAFE", &Encode::test_good_string_u2u)
                            << END;
                        return str;
                      }()
                   << call("Object", &Encode::test_good_object_o2u)
                   << []() {
                        Stream out{"Outcome"};
                        out << call("JSON", &Encode::test_good_outcome_j2u)
                            << call("BASE64", &Encode::test_good_outcome_b2u)
                            << call("URLSAFE", &Encode::test_good_outcome_u2u)
                            << END;
                        return out;
                      }()
                   << END;
              return good;
            }()
         << []() {
              Stream bad{"bad"};
              bad << call("generic", &Encode::test_bad_generic)
                  << []() {
                       Stream out{"Outcome"};
                       out << call("JSON", &Encode::test_bad_outcome_j2u)
                           << call("BASE64", &Encode::test_bad_outcome_b2u)
                           << call("URLSAFE", &Encode::test_bad_outcome_u2u)
                           << END;
                       return out;
                     }()
                  << END;
              return bad;
            }()
         << END;
  return finalize(series);
}
#endiv
