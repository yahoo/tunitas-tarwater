// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::sha1 { class Workbench; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.tarwater.sha1.Workbench
class tests::unit::sha1::Workbench : public cppunit::test::Fixture {
public:
  using Subject = ::tunitas::tarwater::sha1::Workbench;
  auto test_constructor() -> void;
  auto test_bytes() -> void;
  auto test_hexstring() -> void;
  //
  auto test_operator_insert_string_literal() -> void;
  auto test_operator_insert_char_star() -> void;
  auto test_operator_insert_char_const_star() -> void;
  auto test_operator_insert_Character_Array_Zero() -> void;
  auto test_operator_insert_Element() -> void;
  auto test_operator_insert_char() -> void;
  auto test_operator_insert_int() -> void;
  auto test_operator_insert_double() -> void;
  auto test_operator_insert_Dopable() -> void;
  auto test_operator_insert_Container() -> void;
  auto test_operator_insert_manifest_array_Element() -> void;
  auto test_operator_insert_manifest_array_Dopable() -> void;
  auto test_operator_insert_manifest_array_Container() -> void;
  auto test_operator_insert_As_String_int() -> void;
  auto test_operator_insert_As_String_double() -> void;
  auto test_operator_insert_As_Dope_string() -> void;
  auto test_operator_insert_As_Dope_string_view() -> void;
  auto test_operator_insert_As_Dope_array_char() -> void;
  auto test_operator_insert_As_Dope_vector_char() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto equal(std::string const &, std::string const &) -> bool;
};
#endiv
#divert <cpp>
#import std.toupper
auto tests::unit::sha1::Workbench::equal(std::string const &a, std::string const &b) -> bool {
  auto cmp = [](char a, char b) -> bool { return std::toupper(a) == std::toupper(b); };
  return std::equal(a.begin(), a.end(), b.begin(), b.end(), cmp);
}
#import std.string
#import std.string_literals
#import tunitas.tarwater.sha1.to_string
#import tunitas.tarwater.sha1.Bytes
#import tunitas.tarwater.sha1.Hexstring
using namespace std::literals;
#import tunitas.tarwater.sha1
namespace tests::unit::sha1 {
  // cascade the namespaces
  using namespace tunitas::tarwater::sha1;
}
auto tests::unit::sha1::Workbench::test_constructor() -> void {
  Subject ws;
  auto const actual = to_string(bytes(ws));
  CPPUNIT_ASSERT(!actual.empty());
  // If you ask a workbench for the sha1 with nothing put into it you get exactly that!
  auto expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709"s;   // echo -n "" | sha1sum;
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import tunitas.tarwater.sha1.to_string
auto tests::unit::sha1::Workbench::test_bytes() -> void {
  Subject ws;
  ws << "test";
  auto actual = to_string(bytes(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum; 
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_hexstring() -> void {
  Subject ws;
  ws << "test";
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;    // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_string_literal() -> void {
  Subject ws;
  ws << "test";
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;    // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_char_star() -> void {
  Subject ws;
  char specimen[] = { "test" };
  ws << &specimen[0];
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;    // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_char_const_star() -> void {
  Subject ws;
  char const specimen[] = { "test" };
  ws << &specimen[0];
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;    // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.byte
auto tests::unit::sha1::Workbench::test_operator_insert_Character_Array_Zero() -> void {
  Subject ws;
  char const raw[] = { "test" };
  char const *const specimen{reinterpret_cast<char const *>(&raw[0])};
  ws << specimen;
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_Element() -> void {
  Subject ws;
  ws << '1';
  auto actual = to_string(hexstring(ws));
  auto expected = "356a192b7913b04c54574d18c28d46e6395428ab"s;  // echo -n 1 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_char() -> void {
  Subject ws;
  ws << '/';
  auto actual = to_string(hexstring(ws));
  auto expected = "42099b4af021e53fd8fd4e056c2568d7c2e3ffa8"s;  // echo -n / | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import tunitas.tarwater.sha1.as_string
auto tests::unit::sha1::Workbench::test_operator_insert_int() -> void {
  using ::tunitas::tarwater::sha1::as_string;
  Subject ws;
  ws << as_string(123);
  auto actual = to_string(hexstring(ws));
  auto expected = "40bd001563085fc35165329ea1ff5c5ecbdbbeef"s;  // echo -n 123 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_double() -> void {
  using ::tunitas::tarwater::sha1::as_string;
  Subject ws;
  ws << as_string(12.3);
  auto actual = to_string(hexstring(ws));
  auto expected = "a4dccf6d60069442e7e181b9ab9749c184655da6"s;  // echo -n 12.300000 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import tunitas.tarwater.sha1.as_dope
auto tests::unit::sha1::Workbench::test_operator_insert_Dopable() -> void {
  Subject ws;
  auto doped = std::string{"test"};
  ws << as_dope(doped);
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.set
auto tests::unit::sha1::Workbench::test_operator_insert_Container() -> void {
  Subject ws;
  auto contained = std::set<std::string>{"test"};
  ws << contained;
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_manifest_array_Element() -> void {
  Subject ws;
  char array[1]{ '1' };
  ws << as_dope(array);
  auto actual = to_string(hexstring(ws));
  auto expected = "356a192b7913b04c54574d18c28d46e6395428ab"s;  // echo -n 1 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_manifest_array_Dopable() -> void {
  Subject ws;
  std::string array[1]{ "test"s };
  ws << array;
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_manifest_array_Container() -> void {
  Subject ws;
  std::set<std::string> array[1]{std::set<std::string>{"test"s}};
  ws << array;
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.to_string
auto tests::unit::sha1::Workbench::test_operator_insert_As_String_int() -> void {
  using ::tunitas::tarwater::sha1::as_string;
  Subject ws;
  ws << as_string(1) << '/' << as_string(2);
  auto actual = to_string(hexstring(ws));
  auto expected = "EE2CAA07B76D9053386202D6A9C27C949C65C58F"s;  // echo -n 1/2 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
auto tests::unit::sha1::Workbench::test_operator_insert_As_String_double() -> void {
  using ::tunitas::tarwater::sha1::as_string;
  {
    auto const specimen = std::to_string(1.2) + '/' + std::to_string(3.4);
    auto const expected = "1.200000/3.400000"s;
    auto const actual = specimen;
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
  Subject ws;
  ws << as_string(1.2) << '/' << as_string(3.4);
  auto actual = to_string(hexstring(ws));
  auto expected = "6d645c55ef20244599290d97b3e991245e84c827"s;  // echo -n 1.200000/3.400000 | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import tunitas.tarwater.sha1.as_dope
#import std.string
auto tests::unit::sha1::Workbench::test_operator_insert_As_Dope_string() -> void {
  using ::tunitas::tarwater::sha1::as_dope;
  Subject ws;
  auto raw = std::string{"test"};
  ws << as_dope(raw);
  auto actual = to_string(hexstring(ws));
  auto expected = "A94A8FE5CCB19BA61C4C0873D391E987982FBBD3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.string_view
auto tests::unit::sha1::Workbench::test_operator_insert_As_Dope_string_view() -> void {
  using ::tunitas::tarwater::sha1::as_dope;
  Subject ws;
  auto raw = std::string_view{"test"};
  ws << as_dope(raw);
  auto actual = to_string(hexstring(ws));
  auto expected = "A94A8FE5CCB19BA61C4C0873D391E987982FBBD3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.array
auto tests::unit::sha1::Workbench::test_operator_insert_As_Dope_array_char() -> void {
  using ::tunitas::tarwater::sha1::as_dope;
  Subject ws;
  auto raw = std::array<char,4>{'t','e','s','t'};
  ws << as_dope(raw);
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import std.vector
auto tests::unit::sha1::Workbench::test_operator_insert_As_Dope_vector_char() -> void {
  using ::tunitas::tarwater::sha1::as_dope;
  Subject ws;
  auto raw = std::vector<char>{'t','e','s','t'};
  ws << as_dope(raw);
  auto actual = to_string(hexstring(ws));
  auto expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"s;   // echo -n "test" | sha1sum
  CPPUNIT_ASSERT(equal(expected, actual));
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::sha1::Workbench::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("Workbench");
  series << call("constructor", &Workbench::test_constructor)
	 << call("Bytes", &Workbench::test_bytes)
	 << call("Hexstring", &Workbench::test_hexstring)
    ;
  {
    Stream det("operator<<");
    det << call("char *", &Workbench::test_operator_insert_char_star)
        << call("char const *", &Workbench::test_operator_insert_char_const_star)
        << call("string-literal", &Workbench::test_operator_insert_string_literal)
        << call("Character_Array_Zero", &Workbench::test_operator_insert_Character_Array_Zero)
        << call("Element", &Workbench::test_operator_insert_Element)
        << call("char", &Workbench::test_operator_insert_char)
        << call("int", &Workbench::test_operator_insert_int)
        << call("double", &Workbench::test_operator_insert_double)
        << call("Dopable", &Workbench::test_operator_insert_Dopable)
        << call("Container", &Workbench::test_operator_insert_Container)
      ;
      ;
    {
      Stream man("manifest-array");
      man << call("Element", &Workbench::test_operator_insert_manifest_array_Element)
          << call("Dopable", &Workbench::test_operator_insert_manifest_array_Dopable)
          << call("Container", &Workbench::test_operator_insert_manifest_array_Container)
        ;
      det << add(man.release());
    } {
      Stream ass("As_String");
      ass << call("int", &Workbench::test_operator_insert_As_String_int)
          << call("double", &Workbench::test_operator_insert_As_String_double)
        ;
      det << add(ass.release());
    } {
      Stream asd("As_Dope");
      asd << call("string", &Workbench::test_operator_insert_As_Dope_string)
          << call("string_view", &Workbench::test_operator_insert_As_Dope_string_view)
          << call("array<char,4>", &Workbench::test_operator_insert_As_Dope_array_char)
          << call("vector<char>", &Workbench::test_operator_insert_As_Dope_vector_char)
        ;
      det << add(asd.release());
    }
    series << add(std::move(det.release()));
  }
  return series.release();
}
#endiv
