// -*- c++ -*- with SCOLD stylings
#divert <fpp>
namespace tests::unit::exception { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exception::Fixture : public cppunit::test::Fixture {
public:
  auto test_Generic() -> void;
  auto test_Conversion() -> void;
  auto test_Configuration() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::literals;
#import tunitas.tarwater.exception.Generic
#import tunitas.tarwater.exception.Conversion
auto tests::unit::exception::Fixture::test_Generic() -> void {
  using namespace ::tunitas::tarwater::exception;
  try {
    throw Conversion{"badness"};
    // Prove that catching a tarwater Generic exception works
  } catch (Generic const &) {
    CPPUNIT_ASSERT(true);
  }
  try {
    throw std::runtime_error{"badness"};
    // Prove that the Generic tarwater exception does not match the generalist runtime_error.
  } catch (Generic const &) {
    CPPUNIT_ASSERT(false);
  } catch (std::exception const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import tunitas.tarwater.exception.Conversion
auto tests::unit::exception::Fixture::test_Conversion() -> void {
  using namespace ::tunitas::tarwater::exception;
  try {
    // Throw the conversion problem (is concrete enough to construct)
    throw Conversion{"badness"};
  } catch (Generic const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import tunitas.tarwater.exception.Configuration
auto tests::unit::exception::Fixture::test_Configuration() -> void {
  using namespace ::tunitas::tarwater::exception;
  try {
    // Throw the conversion problem (is concrete enough to construct)
    throw Configuration{"badness"};
  } catch (Generic const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.call
#import unit.rigging.suite.add
auto tests::unit::exception::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("exception");
  series << call("Generic", &Fixture::test_Generic)
	 << call("Configuration", &Fixture::test_Configuration)
	 << call("Conversion", &Fixture::test_Conversion)
    ;
  return series.release();
}
#endiv
