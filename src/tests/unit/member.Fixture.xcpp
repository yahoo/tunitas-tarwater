// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace tests::unit::member { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::member::Fixture : public cppunit::test::Fixture {
  auto test_Storage() -> void;
  auto test_load_000() -> void;
  auto test_load_00() -> void;
  auto test_load_01() -> void;
  auto test_load_02() -> void;
  auto test_Name() -> void;
  auto test_Secret() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.string_literals
using namespace std::string_literals;
#import tunitas.tarwater.member.Storage
auto tests::unit::member::Fixture::test_Storage() -> void {
  ::tunitas::tarwater::member::Storage store;
  CPPUNIT_ASSERT(store.member_name.empty());
  CPPUNIT_ASSERT(store.member_secret.empty());
}
#import tunitas.tarwater.member.load
auto tests::unit::member::Fixture::test_load_000() -> void {
  namespace member = tunitas::tarwater::member;
  auto loaded = member::load("/no/such/file/or/directory/at/all");
  CPPUNIT_ASSERT(!ok(loaded));
}
auto tests::unit::member::Fixture::test_load_00() -> void {
  namespace member = tunitas::tarwater::member;
  auto loaded = member::load("/dev/null");
  CPPUNIT_ASSERT(!ok(loaded));
}
auto tests::unit::member::Fixture::test_load_01() -> void {
  namespace member = tunitas::tarwater::member;
  // [[FIXTHIS]] unless this test is run from the top ${srcdir} this will fail
  auto loaded = member::load("tests/unit/load.01.store");
  CPPUNIT_ASSERT(ok(loaded));
  auto store = value(std::move(loaded));
  CPPUNIT_ASSERT(!store.member_name.empty());
  CPPUNIT_ASSERT(!store.member_secret.empty());
  CPPUNIT_ASSERT_EQUAL("Animal Print Pants L.L.C."s, (std::string)store.member_name);
  CPPUNIT_ASSERT_EQUAL("Out Of Control!"s, (std::string)store.member_secret);
}
auto tests::unit::member::Fixture::test_load_02() -> void {
  namespace member = tunitas::tarwater::member;
  // [[FIXTHIS]] unless this test is run from the top ${srcdir} this will fail
  auto loaded = member::load("tests/unit/load.02.store");
  CPPUNIT_ASSERT(ok(loaded));
  auto store = value(std::move(loaded));
  CPPUNIT_ASSERT_EQUAL("Very Serious Agency Trading Desk"s, (std::string)store.member_name);
  CPPUNIT_ASSERT_EQUAL("Not. Joking. At. All.{space}{space}Really."s, (std::string)store.member_secret);
}
#import tunitas.tarwater.member.Name
auto tests::unit::member::Fixture::test_Name() -> void {
  ::tunitas::tarwater::member::Name name{"adtech"};
  CPPUNIT_ASSERT(!name.empty());
}
#import tunitas.tarwater.member.Secret
auto tests::unit::member::Fixture::test_Secret() -> void {
  ::tunitas::tarwater::member::Secret secret{"decoder-ring"};
  CPPUNIT_ASSERT(!secret.empty());
}
auto tests::unit::member::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("member");
  series << call("Name", &Fixture::test_Name)
	 << call("Secret", &Fixture::test_Secret)
	 << call("Storage", &Fixture::test_Storage)
         << []() {
              Stream loa{"load"};
              loa << call("000", &Fixture::test_load_000)
                  << call("00", &Fixture::test_load_00)
                  << call("01", &Fixture::test_load_01)
                  << call("02", &Fixture::test_load_02)
                  << END;
              return loa;
            }()
         << END;
  return finalize(series);
}
#endiv
