// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <fpp>
namespace app::exception {
  //
  // That particular quitting exception
  //
  // Usage:
  //
  //   auto NAME = std::string{"a.out"};
  //   throw Quitting{NAME, std::cerr, sys::exits::FAIL}
  //   throw Quitting{NAME, sys::exits::CONFIG};
  //
  class [[nodiscard]] Quitting;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Aspect
#import tunitas.app.exception.feature.Quitting
#import tunitas.exception.feature.Messaging
#import std.exception
#import std.string
class app::exception::Quitting : public tunitas::app::exception::Aspect,
                                 public tunitas::app::exception::feature::Quitting,
                                 public tunitas::exception::feature::Messaging,
                                 public std::exception {
  struct Ancestors {
    using Quitting = tunitas::app::exception::feature::Quitting;
    using Messaging = tunitas::exception::feature::Messaging;
    using Exception = std::exception;
  };
public:
  inline Quitting(std::string const &NAME, std::ostream &, sys::exits::Code);
  inline Quitting(std::string const &NAME, sys::exits::Code);
  auto exit() const noexcept -> sys::exits::Code override final;
  auto code() const noexcept -> sys::exits::Code override final;
  auto stream() const noexcept -> std::ostream & override final;
  auto what() const noexcept -> char const * override final;
};
#endiv
#divert <ipp>
namespace app::exception {
  Quitting::Quitting(std::string const &NAME, std::ostream &o, sys::exits::Code c)
    : Ancestors::Quitting{o, c}
    , Ancestors::Messaging{NAME + ": quitting"}
  { }
  Quitting::Quitting(std::string const &NAME, sys::exits::Code c)
    : Ancestors::Quitting{c}
    , Ancestors::Messaging{NAME + ": quitting"}
  { }
}
#endiv
#divert <cpp>
namespace app::exception {
  auto Quitting::exit() const noexcept -> sys::exits::Code { return Ancestors::Quitting::code(); }
  auto Quitting::code() const noexcept -> sys::exits::Code { return Ancestors::Quitting::code(); }
  auto Quitting::stream() const noexcept -> std::ostream & { return Ancestors::Quitting::stream(); }
  auto Quitting::what() const noexcept -> char const * { return Ancestors::Messaging::what(); }
}
#endiv
