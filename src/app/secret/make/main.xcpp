// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <hpp>
#import tunitas.app.options.Args
namespace app::secret::make {
  using tunitas::app::options::Args;
  auto main(Args) -> int;
}
#endiv
#divert <cpp>
auto main(int c, char *v[]) -> int {
  namespace d = app::secret::make;
  return d::main(d::Args{(unsigned)c, v});
}
#import autotools.autoconf.Config.tunitas.tarwater.CONFIG
#import app // cascade the namespace from tunitas.app
#import app.exception.Quitting
#import app.secret.make.Configuration
#import app.secret.make.defaults
#import app.secret.make.options.Parser
#import app.secret.make.options.Specification
#import std.cerr
#import std.move
#import sys.exits.constants
#import tunitas.app.Program
#import tunitas.app.exception.Aspect
auto app::secret::make::main(Args args) -> int try {
  Configuration cfg{Program{args.front()}};
  options::Specification spec;
  options::Parser pa{cfg, spec};
  auto parsed = pa.parse(std::move(args));
  if (!ok(parsed)) {
    error(cfg) << "the command line contains errors - " << error_code(parsed).message() << '\n';
    throw exception::Quitting{cfg.NAME, sys::exits::FAIL};
  }
  if (cfg.dry_run_mode) {
    verbose(cfg) << "nothing to do in dry-run mode\n";
  } else {
    throw std::runtime_error{"the making of member secrets is not implemented"};
  }
  return sys::exits::OK;
} catch (exception::Aspect const &g) {
  g.stream() << g.what() << '\n';
  return g.code();
} catch (std::exception const &e) {
  std::cerr << defaults::NAME << ": fatal, an unexpected error - " << e.what() << '\n';
  return sys::exits::SOFTWARE;
}
#endiv
