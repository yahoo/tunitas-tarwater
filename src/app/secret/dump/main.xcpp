// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <hpp>
#import tunitas.app.options.Args
namespace app::secret::dump {
  using tunitas::app::options::Args;
  auto main(Args) -> int;
}
#endiv
#divert <cpp>
auto main(int c, char *v[]) -> int {
  namespace d = app::secret::dump;
  return d::main(d::Args{(unsigned)c, v});
}
#import autotools.autoconf.Config.tunitas.tarwater.CONFIG
#import app // cascade the namespace from tunitas.app
#import app.exception.Quitting
#import app.secret.dump.Configuration
#import app.secret.dump.defaults
#import app.secret.dump.options.Parser
#import app.secret.dump.options.Specification
#import std.cerr
#import std.move
#import sys.exits.constants
#import tunitas.app.Program
#import tunitas.app.exception.Aspect
#import tunitas.tarwater.member.load
auto app::secret::dump::main(Args args) -> int try {
  Configuration cfg{Program{args.front()}};
  options::Specification spec;
  options::Parser pa{cfg, spec};
  auto parsed = pa.parse(std::move(args));
  if (!ok(parsed)) {
    error(cfg) << ": error, the command line contains errors - " << error_code(parsed).message() << '\n';
    throw exception::Quitting{cfg.NAME, sys::exits::FAIL};
  }
  if (!cfg.secret_storage) {
    // This is actually a programmer error, not a luser error because Parser was supposed to have set this
    error(cfg) << "the secret storage filepath was not specified\n";
    throw exception::Quitting{cfg.NAME, sys::exits::FAIL};
  }
  auto const &secret_filepath = *cfg.secret_storage;
  if (cfg.dry_run_mode) {
    verbose(cfg) << "nothing to do in dry-run mode\n";
  } else {
    using namespace tunitas::tarwater;
    auto loaded = member::load(secret_filepath);
    if (!ok(loaded)) {
      auto &error{::options::error(cfg)};
      error << "could not load the member-secret database "
	    << secret_filepath
	    << " because " << error_code(loaded).message() << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::CONFIG};
    }
    auto store = value(std::move(loaded));
    std::cout << "name " << store.member_name << '\n'
	      << "secret " << store.member_secret << '\n';
  }
  return sys::exits::OK;
} catch (exception::Aspect const &g) {
  g.stream() << g.what() << '\n';
  return g.code();
} catch (std::exception const &e) {
  std::cerr << defaults::NAME << ": fatal, an unexpected error - " << e.what() << '\n';
  return sys::exits::SOFTWARE;
}
#endiv
