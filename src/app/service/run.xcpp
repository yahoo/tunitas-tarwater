// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018, 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/tarwater/tree/LICENSE
#divert <hpp>
#import app.service.Configuration
namespace app::service {
  //
  // run - do that thing
  //
  // Does return
  //   FOREGROUND - returns at the end of program
  //   BACKGROUND - returns because the server is in the background
  //
  // Usage:
  //
  //   try {
  //     Configuration cfg{...};
  //     run(cfg);
  //   } catch (std::exception const &) {
  //     ...report the problem...
  //   }
  //
  auto run(Configuration const &) -> void;
}
#endiv
#divert <cpp>
#import app.exception.Quitting
#import app.service.constants
#import app.service.defaults
#import app.service.drop
#import autotools.autoconf.Config.tunitas.tarwater.CONFIG
#import getpid
#import httpserver.service.Create // httpserver >= 0.5.0
#import httpserver.Service
#import std.boolalpha
#import std.cout
#import std.move
#import tunitas.tarwater.member.load
#import tunitas.tarwater.member.Storage
#import tunitas.tarwater.service.Core
#import tunitas.tarwater.endpoint.Sync
#import want.sys.posix.daemon
auto app::service::run(Configuration const &cfg) -> void {
  namespace sys = want::sys;
  httpserver::Service ws{[&cfg]() {
    httpserver::service::Create specification;
    using namespace constants::server;
    specification.debug();
    specification.use_ipv6().start_method(METHOD).max_threads(THREADS);
    specification.port(cfg.service_port.value_or(defaults::SERVICE_PORT));
    return specification;
  }()};
  if (cfg.emit_pid) {
    std::cout << getpid() << std::flush;
  }
  if (cfg.drop_privileges) {
    drop(cfg);
  }
  using namespace tunitas::tarwater;
  auto store = [&cfg]() -> member::Storage {
    using ac = autotools::autoconf::Config<CONFIG>;
    auto const member_storage_filepath = cfg.member_storage.value_or(ac::pkgconfdir(), defaults::MEMBER_STORAGE);
    auto loaded = member::load(member_storage_filepath);
    if (!ok(loaded)) {
      auto &error{::options::error(cfg)};
      error << "could not load the member secret database "
	    << member_storage_filepath
	    << " because " << error_code(loaded).message() << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::CONFIG};
    }
    return value(std::move(loaded));
  }();
  //
  Core core{store};
  auto const FAMILY_SENSE = false;
  endpoint::Sync sync{core};
  ws.register_resource("/sync", &sync, FAMILY_SENSE);   // "our" standard name (same as theirs)
  ws.register_resource("/userid", &sync, FAMILY_SENSE); // "their" standard name
  // There is no 'quit' method.  The service runs forever
  auto foreground_mode = cfg.foreground_mode.value_or(defaults::FOREGROUND_MODE);
  debug(cfg) << "foreground mode = " << std::boolalpha << foreground_mode << '\n';
  if (!foreground_mode) {
    using namespace want::sys::posix;
    auto ized = daemon(Chdir::YES, Close::YES);
    if (!ok(ized)) {
      ::options::error(cfg) << "could not daemonize because " << error_code(ized).message() << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::UNAVAILABLE};
    }
  }

  ws.start(constants::server::BLOCKING);
}
#endiv
