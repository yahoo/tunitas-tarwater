// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-tarwater/blob/master/LICENSE for terms.
#divert <fpp>
namespace app::service::options {
  //
  // The options parser
  //
  // The lifetime of the Configuration must be longer than that of the Parser
  // The lifetime of the Specification must be longer than that of the Parser
  //
  // Usage:
  //
  //   Configuration cfg{...};
  //   options::Parser parser{cfg};
  //   auto parsed = parser(Args{c, v});
  //   if (ok(parsed)) {
  //   } else {
  //     
  //   }
  class Parser;
}
#endiv
#divert <hpp>
#import app.service.Configuration
#import app.service.options.parser.Result
#import tunitas.app.options.Args
#import tunitas.app.options.Specification
class app::service::options::Parser {
public:
  using Specification = tunitas::app::options::Specification;
  inline Parser(Configuration &cfg, Specification const &);
  inline Parser(Configuration &&, Specification const &) = delete;
  inline Parser(Configuration const &, Specification &&) = delete;
  using Args = tunitas::app::options::Args;
  using Result = parser::Result;
  auto parse(Args) -> Result;
protected:
  Configuration &cfg;
  Specification const &spec;
};
#endiv
#divert <ipp>
app::service::options::Parser::Parser(Configuration &cfg, Specification const &spec)
  : cfg{cfg}
  , spec{spec}
{ }
#endiv
#divert <cpp>
#import app.exception.Quitting
#import app.service.Usage
#import app.service.options.indicator.constants
#import options.longish.Getter
#import options.longish.Step
#import std.cerr
#import std.literals
#import std.logic_error // [[FIXTHIS]] nonstd::exception::Unexpected
#import std.to_string
#import sys.exits.constants
#import tunitas.app.options.get_port
#import tunitas.app.options.get_filepath
#import tunitas.app.options.get_identifier
#import tunitas.tarwater.Version
using namespace std::literals;
auto app::service::options::Parser::parse(Args args) -> Result {
  using namespace ::options::longish;
  Getter get{spec.shortish(), spec.longish(), args};
  for (Step step=get(); more(step); step=get()) {
    switch (code(step)) {
      namespace oi = options::indicator;
    case oi::CHR_h:
    case oi::USAGE_SUBCOMMAND:
      throw Usage{cfg.NAME, sys::exits::OK};
    case oi::CHR_V:
    case oi::VERSION_SUBCOMMAND:
      throw tunitas::tarwater::Version{cfg.NAME};
    case oi::CHR_d:
    case oi::DEBUG_MODE:
      cfg.debug_mode = true;
      break;
    case oi::CHR_v:
    case oi::VERBOSE_MODE:
      cfg.verbose_mode = true;
      break;
    case oi::CHR_q:
    case oi::QUIET_MODE:
      cfg.quiet_mode = true;
      break;
    case oi::CHR_w:
    case oi::WARNING_MODE:
      cfg.warning_mode = true;
      break;
    case oi::CHR_y:
    case oi::DRYRUN_MODE:
      cfg.dry_run_mode = true;
      break;
    case oi::CHR_b:
    case oi::BACKGROUND_MODE:
      cfg.foreground_mode = false;
      break;
    case oi::CHR_f:
    case oi::FOREGROUND_MODE:
      cfg.foreground_mode = true;
      break;
    case oi::CHR_P:
    case oi::EMIT_PID:
      cfg.emit_pid = true;
      break;
    case oi::CHR_p:
    case oi::SERVICE_PORT:
      cfg.service_port = tunitas::app::options::get_port<exception::Quitting>(cfg, step);
      break;
    case oi::CHR_D:
    case oi::DROP_PRIVILEGES:
      cfg.drop_privileges = true;
      break;
    case oi::CHR_u:
    case oi::UNPRIVILEGED_USER:
      cfg.drop_privileges = true;
      cfg.unprivileged_user = tunitas::app::options::get_identifier<exception::Quitting>(cfg, step);
      break;
    case oi::CHR_M:
    case oi::MEMBER_STORAGE:
      cfg.member_storage = tunitas::app::options::get_filepath<exception::Quitting>(cfg, step);
      break;
    case oi::CHR_U:
      error(cfg) << "the single letter option for the unprivileged user is -U (capital 'U')\n";
      throw exception::Quitting{cfg.NAME, sys::exits::USAGE};
    case oi::MISSING:
      // [[FIXTHIS,TODO]] -- resolve whether it is a short or long option as ::options::option_in_error(code)
      // [[FIXTHIS]] get a better application-level messaging & logging facility
      error(cfg) << "missing required value for " << word_in_error(step) << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::USAGE};
    case oi::UNKNOWN:
      // [[FIXTHIS, TODO]] ibidem. use options::option_in_error(code)
      // [[FIXTHIS, TODO]] ibidem. better messaging.
      error(cfg) << "unknown option " << word_in_error(step) << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::USAGE};
    default:
      throw std::logic_error{"unexpected option code "s + std::to_string((int)code(step))}; 
    }
  }
  return Result{true, get.begin(), get.end()};
}
#endiv
