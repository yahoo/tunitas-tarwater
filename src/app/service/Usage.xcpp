// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace app::service {
  //
  // The usage string, as a throwable exception.
  // Throwing the usage exception may or may not signal success or an error depending
  // upon whether the user requested it via the --usage option.  It has both utilities.
  //
  // Usage:
  //
  //   throw Usage{};
  //   throw Usage{sys::exits::USAGE};
  //   throw Usage{sys::exits::CONFIG};
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Usage
#import tunitas.app.exception.Messaging
#import std.exception
#import std.string
#import sys.exits.constants
class app::service::Usage : public tunitas::app::exception::Usage, public tunitas::app::exception::Messaging, public std::exception {
  struct ancestors {
    using Usage = tunitas::app::exception::Usage;
    using Messaging = tunitas::app::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Usage(std::string name, sys::exits::Code = sys::exits::OK);
  auto what() const noexcept -> char const * final;
protected:
  static auto format(std::string const &name) -> std::string;
};
#endiv
#divert <ipp>
app::service::Usage::Usage(std::string name, sys::exits::Code code)
  : ancestors::Usage{code}
  , ancestors::Messaging{format(name)}
{ }
#endiv
#divert <cpp>
auto app::service::Usage::what() const noexcept -> char const * {
  return ancestors::Messaging::what();
}
#import std.ostringstream
#import app.service.defaults
auto app::service::Usage::format(std::string const &NAME) -> std::string {
  std::ostringstream buf;
  buf << "usage: " << NAME << " [...options...]\n"
      << "\n"
      << "Service Options\n"
      << "--foreground, --fg, -f             remain in the foreground, e.g. for systemd\n"
      << "--background, --bg                 daemonize into the background\n"
      << "--pid, -P                          emit the PID of the running daemon on the standard output\n"
      << "  alternative: --emit-pid\n"
      << "--port=NUMBER, -p NUMBER           use port NUMBER instead of the default " << defaults::SERVICE_PORT << '\n'
      << '\n'
      << "General Options:\n"
      << "--usage, --help, -h                emit this message, and exit\n"
      << "--version, -V                      emit the package version, and exit\n"
      << "--dry-run, --dryrun, -y            dry run, do not start the server\n"
      << "--warnings, --warning, -w          emit warnings\n"
      << "--quiet, -q                        be quiet, emit no notices or warnings\n"
      << "--verbose, -v                      be verbose (independent of --quiet)\n"
      << "--debug, -d                        debug output (you should not need this)"; // no '\n'
  return buf.str();
}
#endiv
